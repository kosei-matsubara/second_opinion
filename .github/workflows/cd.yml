# CIチェックが通ること確認した上で、Rails, Next を自動デプロイ
name: Continuous Delivery

# branch-mainにコード差分をpush時にworkflowを実行する
on:
  push:
    branches: [ "main" ]

# 当 workflow 内で使用できる変数を定義
# $AWS_REGION のような形で参照可能
env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: second-opinion-cluster
  ECS_SERVICE_BACKEND: second-opinion-backend-service
  ECS_SERVICE_FRONTEND: second-opinion-frontend-service
  ECS_TASK_DEFINITION_BACKEND: ./back_end/task-definition.json
  ECS_TASK_DEFINITION_FRONTEND: ./front_end/task-definition.json
  ECR_REPOSITORY_RAILS: second-opinion-rails
  ECR_REPOSITORY_NEXT: second-opinion-next
  CONTAINER_NAME_RAILS: rails
  CONTAINER_NAME_NEXT: next

# ECRに対してpushするため権限を設定する
permissions:
  contents: read

jobs:

  # 事前処理としてCI関連の処理を実行する
  # ci:
    # uses: ./.github/workflows/ci.yml

  # バックエンド関連のデプロイを実施する
  deploy-rails:
    # 課題：CI実装後にコメントアウトを解除する
    # needs: [ci]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # AWS認証のため各設定をする
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # AWS-ECRにログインする
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }} # GitコミットSHAをTAGに使用する
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG -f ./back_end/Dockerfile.prod ./back_end
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_RAILS:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
        container-name: ${{ env.CONTAINER_NAME_RAILS }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true # サービス起動安定まで待機する

  # フロントエンド関連のデプロイを実施する
  deploy-next:
    # 課題：CI実装後にコメントアウトを解除する
    # needs: [ci]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # AWS認証のため各設定をする
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # AWS-ECRにログインする
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }} # GitコミットSHAをTAGに使用する
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NEXT:$IMAGE_TAG -f ./front_end/Dockerfile.prod ./front_end
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NEXT:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NEXT:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_FRONTEND }}
        container-name: ${{ env.CONTAINER_NAME_NEXT }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true # サービス起動安定まで待機する
